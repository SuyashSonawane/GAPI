class GAPI { constructor(e, r = null) { this.token = r, this.username = e; } getUser() { return new Promise((e, r) => { this.username || r(Error("Invalid Username")), fetch(`https://api.github.com/users/${this.username}`).then(r => { e(r.json()); }).catch(e => { r(e); }); }); } getRepo(e) { return new Promise((r, t) => { e || t(Error("Invalid Repo")), fetch(`https://api.github.com/repos/${this.username}/${e}`).then(e => { r(e.json()); }).catch(e => { t(e); }); }); } getOrgs() { return new Promise((e, r) => { this.username || r(Error("Invalid Username")), fetch(`https://api.github.com/users/${this.username}/orgs`).then(r => { e(r.json()); }).catch(e => { r(e); }); }); } getOrgMembers(e) { return new Promise((r, t) => { e || t(Error("Invalid Organization")), fetch(`https://api.github.com/orgs/${e}/members`).then(e => { r(e.json()); }).catch(e => { t(e); }); }); } }